type TX {
  id: ID!
  block: Int!
  timestamp: Int!
  hash: String!
  chainId: Int!
  from: String!
}

type Role {
  id: ID!
  chainId: Int!
  roleHash: String!
  beamPool: BeamPool
  beamR: BeamrGlobal!
  admins: [String!]!
}

type BeamrGlobal {
  id: ID!
  chainId: Int!
  beamPools: [BeamPool!]! @derivedFrom(field: "beamR")
  adminRole: Role!
  rootAdminRole: Role!
  beams: [Beam!]! @derivedFrom(field: "beamR")
}

type User {
  id: ID! # FID string
  fid: Int!
  accounts: [UserAccount!]! @derivedFrom(field: "user")
  pools: [BeamPool!]! @derivedFrom(field: "creator")
  incoming: [Beam!]! @derivedFrom(field: "to")
  outgoing: [Beam!]! @derivedFrom(field: "from")
  profile: Profile
}

type Profile {
  id: ID! # FID string
  user: User!
  display_name: String
  username: String
  pfp_url: String
}

type UserAccount {
  id: ID! # chainId-address
  chainId: Int!
  address: String!
  user: User!
  pools: [BeamPool!]! @derivedFrom(field: "creatorAccount")
}

type BeamPool {
  id: ID! #poolAddress
  chainId: Int!
  beamR: BeamrGlobal!
  creator: User!
  creatorAccount: UserAccount!
  token: String!
  beams: [Beam!]! @derivedFrom(field: "beamPool")
  beamCount: Int!
  totalUnits: BigInt!
  active: Boolean!
  flowRate: BigInt!
  lastUpdated: Int!
  poolAdminRole: Role!
  metadata: PoolMetadata!
  adjustmentFlowRate: BigInt!
  adjustmentMember: String!
  lastDistroUpdate: DistributionUpdated
  allRecipients: [String!]!
  distributionUpdates: [DistributionUpdated!]! @derivedFrom(field: "beamPool")
  memberUnitsUpdated: [MemberUnitsUpdated!]! @derivedFrom(field: "beamPool")
}

# # mul memberUnits by totalFlowrate and then divide by total units

type PoolMetadata {
  id: ID!
  creatorFID: Int!
  poolType: Int!
  name: String!
  description: String
  castHash: String
  instructions: String
}

type Beam {
  id: ID!
  chainId: Int!
  from: User!
  to: User!
  beamPool: BeamPool!
  recipientAccount: UserAccount!
  units: BigInt!
  isReceiverConnected: Boolean!
  beamR: BeamrGlobal!
  lastUpdated: Int!
  memberUnitsUpdated: [MemberUnitsUpdated!]! @derivedFrom(field: "beam")
}

type TokenMetric {
  id: ID!
  chainId: Int!
  address: String!
  amountBeamed: BigInt!
  vanityMetrics: VanityMetrics!
}

type VanityMetrics {
  id: ID!
  users: Int!
  beamPools: Int!
  beams: Int!
  TokenMetrics: [TokenMetric!]! @derivedFrom(field: "vanityMetrics")
}

# # Raw Events for SuperfluidPool Contract (filtered by BeamR specific pools only)

type MemberUnitsUpdated {
  id: ID!
  beamPool: BeamPool!
  beam: Beam!
  member: String!
  oldUnits: BigInt!
  newUnits: BigInt!
}

# # Raw Events for GDA Contract (filtered by BeamR specific pools only)

type DistributionUpdated {
  id: ID!
  beamPool: BeamPool!
  distributor: String!
  oldFlowRate: BigInt!
  newFlowRateFromDistributor: BigInt!
  newTotalDistributionFlowRate: BigInt!
  adjustmentFlowRate: BigInt!
  adjustmentFlowRecipient: String!
  operator: String!
}

# # Raw Events for BeamR Contract

type BeamR_Initialized {
  id: ID!
  adminRole: String!
  rootAdminRole: String!
  tx: TX!
}

type BeamR_PoolCreated {
  id: ID!
  pool: String!
  token: String!
  config_0: Boolean!
  config_1: Boolean!
  creator: String!
  poolAdminRole: String!
  metadata_0: BigInt!
  metadata_1: String!
  tx: TX!
}

type BeamR_PoolMetadataUpdated {
  id: ID!
  pool: String!
  metadata_0: BigInt!
  metadata_1: String!
  tx: TX!
}

type BeamR_RoleAdminChanged {
  id: ID!
  role: String!
  previousAdminRole: String!
  newAdminRole: String!
  tx: TX!
}

type BeamR_RoleGranted {
  id: ID!
  role: String!
  account: String!
  sender: String!
  tx: TX!
}

type BeamR_RoleRevoked {
  id: ID!
  role: String!
  account: String!
  sender: String!
  tx: TX!
}
